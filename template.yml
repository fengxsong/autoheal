#
# Copyright (c) 2018 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# This file contains an OpenShift template that creates all the objects needed
# for a working instance of the auto-heal service. See the `template.sh` file
# for an example of how to use it.

apiVersion: v1
kind: Template
metadata:
  name: autoheal-template
  annotations:
    description: "Auto-heal service"
    tags: "autoheal"

parameters:
- name: NAME
  description: |-
    The name of the auto-heal service. Will also be used as a prefix for the
    names of secrets and other objects.
  value: autoheal
- name: NAMESPACE
  description: |-
    The namespace where the auto-heal service will be created.
  value: openshift-autoheal
- name: OAUTH_PROXY_SECRET
  description: |-
    Secret used to encrypt OAuth session cookies.
  value: openshift-monitoring
- name: AWX_ADDRESS
  description: |-
    The URL of the AWX API endpoint, including the `/api` suffix, but not the
    `/v1` or `/v2` suffixes. For example `https://my-awx.example.com/api`.
- name: AWX_PROXY
  description: |-
    The URL of the proxy server used to connect to the AWX API. If not present
    or empty then no proxy server will be used. For example
    `http://my-proxy.example.com:3128`.
- name: AWX_USER
  description: |-
    The name of the user that will be used to connect to the AWX API. The value
    must be encoded using Base64.
- name: AWX_PASSWORD
  description: |-
    The password of the user that will be used to connect to the AWX API. The
    value must be encoded using Base64.
- name: AWX_CA
  description: |-
    The trusted CA certificates used to verify the TLS certificate presented by
    the AWX server. If not present or empty then the global system trusted
    certificates will be used. The value must be encoded using Base64.
- name: AWX_PROJECT
  description: |-
    The name of the AWX project that contains the job templates that the
    auto-heal service will use to respond to alerts.
  value: "Auto-heal"

objects:

- apiVersion: v1
  kind: ServiceAccount
  metadata:
    namespace: ${NAMESPACE}
    name: ${NAME}

- apiVersion: v1
  kind: Role
  metadata:
    namespace: ${NAMESPACE}
    name: ${NAME}
  rules:
  - apiGroups:
    - ""
    resources:
    - secrets
    resourceNames:
    - ${NAME}-awx-credentials
    - ${NAME}-awx-tls
    verbs:
    - get

- apiVersion: v1
  kind: RoleBinding
  metadata:
    namespace: ${NAMESPACE}
    name: ${NAME}
  roleRef:
    namespace: ${NAMESPACE}
    name: ${NAME}
  subjects:
  - kind: ServiceAccount
    name: ${NAME}
  userNames:
  - system:serviceaccount:${NAMESPACE}:${NAME}

- apiVersion: v1
  kind: Secret
  metadata:
    namespace: ${NAMESPACE}
    name: ${NAME}-awx-credentials
  data:
    username: ${AWX_USER}
    password: ${AWX_PASSWORD}

- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: ClusterRoleBinding
  metadata:
    name: ${NAME}-auth-delegator
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:auth-delegator
  subjects:
  - kind: ServiceAccount
    name: ${NAME}
    namespace: ${NAMESPACE}

- apiVersion: v1
  kind: Secret
  metadata:
    namespace: ${NAMESPACE}
    name: ${NAME}-awx-tls
  data:
    ca.crt: ${AWX_CA}

- apiVersion: v1
  kind: Secret
  metadata:
    namespace: ${NAMESPACE}
    name: ${NAME}-proxy-cookie
  data:
    session_secret: ${OAUTH_PROXY_SECRET}

- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    name: ${NAME}-access
  rules:
  - apiGroups:
    - ""
    resources:
    - secrets
    resourceNames:
    - ${NAME}-access-key
    verbs:
    - get

- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    namespace: ${NAMESPACE}
    name: alertmanager-${NAME}-access
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: ${NAME}-access
  subjects:
  - kind: ServiceAccount
    namespace: openshift-monitoring
    name: alertmanager-main

- apiVersion: v1
  kind: ConfigMap
  metadata:
    namespace: ${NAMESPACE}
    name: ${NAME}-config
  data:
    autoheal.yml: |-
      awx:
        address: ${AWX_ADDRESS}
        proxy: ${AWX_PROXY}
        credentialsRef:
          namespace: ${NAMESPACE}
          name: ${NAME}-awx-credentials
        tlsRef:
          namespace: ${NAMESPACE}
          name: ${NAME}-awx-tls
        project: ${AWX_PROJECT}

- apiVersion: apps/v1beta1
  kind: Deployment
  metadata:
    namespace: ${NAMESPACE}
    name: ${NAME}
  spec:
    selector:
      matchLabels:
        app: ${NAME}
    replicas: 1
    template:
      metadata:
        labels:
          app: ${NAME}
      spec:
        serviceAccountName: ${NAME}
        volumes:
        - name: config
          configMap:
            name: ${NAME}-config
        - name: ${NAME}-proxy-tls
          secret:
            secretName: ${NAME}-proxy-tls
        - name: ${NAME}-proxy-cookie
          secret:
            secretName: ${NAME}-proxy-cookie
        containers:
        - name: oauth-proxy
          image: openshift/oauth-proxy:v1.1.0
          imagePullPolicy: IfNotPresent
          ports:
          - containerPort: 8443
            name: public
          args:
          - --https-address=:8443
          - --provider=openshift
          - --openshift-service-account=${NAME}
          - --upstream=http://localhost:9099
          - --tls-cert=/etc/tls/private/tls.crt
          - -email-domain=*
          - '-openshift-sar={"resource": "secrets", "verb": "get", "name": "${NAME}-access-key", "namespace": "${NAMESPACE}"}'
          - '-openshift-delegate-urls={"/": {"resource": "secrets", "verb": "get", "name": "${NAME}-access-key", "namespace": "${NAMESPACE}"}}'
          - -tls-key=/etc/tls/private/tls.key
          - -client-secret-file=/var/run/secrets/kubernetes.io/serviceaccount/token
          - -cookie-secret-file=/etc/proxy/secrets/session_secret
          - -openshift-ca=/etc/pki/tls/cert.pem
          - -openshift-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          volumeMounts:
          - mountPath: /etc/tls/private
            name: ${NAME}-proxy-tls
          - mountPath: /etc/proxy/secrets
            name: ${NAME}-proxy-cookie
        - name: service
          image: openshift/origin-autoheal:latest
          imagePullPolicy: IfNotPresent
          volumeMounts:
          - name: config
            mountPath: /etc/autoheal
          command:
          - /usr/bin/autoheal
          args:
          - server
          - --config-file=/etc/autoheal/autoheal.yml
          - --logtostderr

- apiVersion: v1
  kind: Service
  metadata:
    namespace: ${NAMESPACE}
    name: ${NAME}
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: ${NAME}-proxy-tls
  spec:
    selector:
      app: ${NAME}
    ports:
    - name: autoheal
      port: 443
      targetPort: 8443
